Enable IPv6 on VCNs and Subnets
Networking --> Virtual Cloud Networks --> VCN-A --> Resources --> CIDR Blocks/Prefixes-->Add CIDR Block/IPv6 Prefix--> Oracle allocated IPv6/56--> Add CIDR Blocks/Prefixes.--> Resources -->Subnets-->VCN-A-SUBNET-A-->Resources-->IPv6 Prefixes-->Add IPv6 Prefix-->Oracle allocated IPv6 /64 prefix-->Complete the IPv6 CIDR prefix by entering two hexadecimal digits between 00 and FF – for example, 7E.--> Add IPv6 Prefix.--> Repeat steps for VCN-B and add the subnet VCN-B-SUBNET-A

Enable IPv6 on Compute Instances
Compute-Instances-VM-01-Resources-Attached VNICs-VM-01-Resources-IPv6 Addresses-Assign IPv6 Address-Automatically assign IPv6-Assign-SSHVM-01 (use the provided private SSH Key) using the public IP address-- sudo firewall-cmd --permanent --add-service=dhcpv6-client -- sudo firewall-cmd --reload -- sudo dhclient -6 ens3 -- Repeat steps for  VM-02.

Create a Dynamic Routing Gateway and attach the VCNs
Networking-->Dynamic Routing Gateway--Create Dynamic Routing Gateway--DRG-01--Resources--VCN Attachments--Create VCN Attachment-VCN-A-ATCH-Select a VCN list-VCN-A--Resources--VCN Attachments--Create VCN Attachment--VCN-B-ATCH-Select a VCN list--VCN-B--Resources--DRG Route Tables--Autogenerated DRG Route Table for VCN attachments--Get All Route Rules--Destination CIDR, copy IPv6 CIDR prefixes

Add route rules to both VCNs’ route tables
Networking--VCN--VCN-A--Resources-RouteTables--RoutetableforVCN-A--AddRouteRules--ProtocolVersion IPv6--targettypeDRG--DestCIDR=VCN-2ipv6prefix-add routerules-repeat for other VCN-B

Add security rules to both VCNs’ security lists
Networking--VCN--VCN-A--Resources--SecurityLists--VCN-A--Egress--addegress--destCIDR=::/0 -- all protocols - add egress rule--resources--ingress--addingress--SourceCIDR=VCN-2IPv6 CIDR Prefix--- protocol IPv6-ICMP-- addingress--repeat for VCN-B

login vm1 ping6 ipv6 address of vm2
login vm2 ping6 ipv6 address of vm1

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Establish Local Peering for VCNs
VCN-01--Create Local Peering Gateway--LPG–01
VCN-02--create local peering gateway--LPG–02.
More Actions menu (three vertical dots at the far right of the listed LPG) and select Establish Peering Connection.
Select the other VCN and LPG in your compartment.

Create zone-a.local Custom Private Zone
Private DNS zones contain DNS data only accessible from within a virtual cloud network (VCN), such as private IP addresses. A private DNS zone has similar capabilities to an internet DNS zone, but provides responses only for clients that can reach it through a VCN. In this walkthrough,you’ll create a private zone and a record. Later you will use that to play with the VCN resolvers and fetch records from zones associated with other VCNs.



Create zone-a.local Custom Private Zone

Networking--DNS Management--Zones--Private Zones--Create Zone--zone-a.local--existing DNS Private View--VCN–01.
Manage Record - Add Record
• Record Type: A - IPv4 Address
• Name: server01
• TTL: 30 seconds. If the lock icon is engaged, click on it to disengage, and enable the field.
• Address: 10.0.0.2
Submit.
Publish Changes.

Create zone-b.local Custom Private Zone

Networking--DNS Management--Zones--Private Zones--Create Zone--zone-b.local--existing DNS Private View--VCN–02.
Manage Record - Add Record
• Record Type: A - IPv4 Address
• Name: server01
• TTL: 30 seconds. If the lock icon is engaged, click on it to disengage, and enable the field.
• Address: 172.16.0.123
Submit.
Publish Changes.

ssh -i <private_ssh_key opc@<ip-address>

host server01.zone-a.local
host server01.zone-b.local

Configure the VCN Resolver Adding the Other Private View
This is the most critical task to be performed in the performance based exam.

Networking--VCN--VCN-01--DNSResolver--Privateresolver-ManagePrivateViews-Chooseaprivateviewofnewaddedline--VCN02--Save

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create master encryption key and the secret
Create master encryption key and the secret:


1. Log in to your tenancy in the Oracle Cloud Infrastructure (OCI) console.
2. Click the Navigation menu, under Identity & Security, click Vault.
3. In the left navigation pane, under List Scope, select the (root) compartment from the Compartment drop-down menu.
4. Select OCI_Vault from the list of vaults in the root compartment. (Note the Vault name may be different in the actual performance based test. To successfully complete this scenario, u need to create a Vault with the name OCI_Vault in the root compartment)  Reference: Creating a Vault (oracle.com)
5. On the OCI_Vault Details page, select your assigned compartment from Compartment drop-down menu on the left column under List Scope.
6. From the left navigation pane under Resources, click Master Encryption Keys and then click Create Key.
7. On the Create Key page, enter the following details:
a. Create in Compartment: <Select your assigned compartment>
b. Protection Mode: HSM
c. Name: VK-01
d. Key Shape Algorithm: Accept the default value
e. Key Shape Length: 256 bits

8. Click Create Key.
9. It will take about a minute to create the master encryption key. The keys will go through the Creating state to the Active state.
10. From the left navigation pane under Resources, click Secrets, and click Create Secret.
11. On the Create Secret page, enter the following details:
a. Name: SK-01
b. Description: “My application secret key”
c. Encryption Key: Select VK-01, the key created earlier.
d. Secret Type Template: Plain Text
e. Secret Contents: <Plain text to be encrypted>
Example: HelloWorld

12. Click Create Secret.
13. After the secret is created click on SK-01.
14. Click the Copy link located to the right of the Secret Key’s OCID value.
Later, it will be included in a python script.
sample: ocid1.vaultsecret.oc1.phx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

Create a VCN and a Compute Instance
Create a VCN and a Compute Instance:

Before you can authorize API calls on an instance, you must first create a VCN and the compute instance.

1. In the navigation menu, under Networking, click Virtual Cloud Networks.
2. Click Start VCN Wizard.
3. Select the Create VCN with Internet Connectivity radio button, and then click Start VCN Wizard.
4. Enter the following values:
a. Name: VCN-01
b. Compartment: Select your assigned compartment.
5. Leave the default values for the remaining fields. Click Next.
6. Verify the details on the Review and Create page.
7. Click Create to start creating the VCN and its resources.
8. Once complete, click View Virtual Cloud Network to verify the creation of the VCN and its resources.
9. Next, you will create a compute instance in your assigned compartment.
10. In the navigation menu, under Compute, click Instances.
11. Select your assigned compartment from Compartment drop-down menu on the left column under List Scope.
12. Click Create Instance. On the Create Instance page, provide the following details:
a. Name: VM-01
b. Create in compartment: Select your assigned compartment
c. Placement: AD1
d. Image: Leave at the default setting, Oracle Linux 8.
e. Shape: Click Change shape. For Shape Series, select Specialty and previous generation. Scroll down and select the checkbox next to VM.Standard2.1.
f. In Networking:
1) Primary network: Click Select existing virtual cloud network.
2) Virtual cloud network in <your compartment>: Select your VCN, VCN-01.
3) Subnet: Click Select existing subnet.
4) Subnet in <your compartment>: Select your VCN’s public subnet, public subnet-VCN-01 (regional).
5) Public IP address: Click Assign a public IPv4 address.
g. Generate (or upload) SSH Keys:

1) Click Generate a key pair for me.
2) Click Save private key. This will save the private key to your local workstation.
3) Click Save public key. This will save the public key to your local workstation.

13. Click Create.
14. After the instance is provisioned, details about it appear in the instance list.

Copy and save the public IP addresses, which will be required to connect to the instance using SSH.

Authorize an Instance to Make API Calls to OCI Vault
In this scenario step you will learn how to authorize an instance to make API calls to the OCI Vault service. By adding an instance to a dynamic group and providing the required policies, an application running on an instance can call the OCI Vault service without requiring user credentials or a configuration file.

Create a Dynamic Group and Add Matching Rules:
Open the navigation menu and click Identity & Security. Under Identity, click Dynamic Groups.
Click Create Dynamic Group.
Enter the following:
        a. Name: <Enter Unique Group Name>
        b. Description: <Describe the Dynamic group>
4. Under the Matching Rules section, click Rule Builder. To include all instances that are in a specific compartment.
5. From the Include instances that match menu:
       a. Select All of the following.
       b. For Match instances with: Select Compartment OCID.
       c. For Value: Enter the compartment OCID.

Create Policies to Permit the Dynamic Groups to Access OCI Vault Secret Service
The policy to permit a dynamic group access to secret in a compartment is

Allow dynamic-group <dynamic_group_name> to read secret-family in compartment <compartment_name>

Retrieve Secret for Encryption and Decryption
1. In the console ribbon at the top right of the screen, click the Cloud Shell icon.
While the Cloud Shell is launching, take a moment to locate the public and private keys that you downloaded to your workstation in the previous section.
Example Public Key name: ssh-key-<date>.key.pub
Example Private Key name: ssh-key-<date>.key

Once the cloud shell window is open, upload the private key to the Cloud Shell.
a. Click the Settings icon on the top-right corner of the cloud shell window and click Upload.
b. Navigate to and select the private key. Either drag-and-drop the private key to the Drop a file window, or click Select from your computer, select the private key and click Upload.

3. Change the private key permissions by issuing the following command.

$ chmod 400 <private_key_name>

Where private_key_name is the name of the private key that you uploaded in the previous section.

Example:

$ chmod 400 ssh-key-<date>.key

4. Retrieve the Public IP address of the instance that you created in the previous section and paste it to connect to the instance using opc user in the Cloud Shell.

$ ssh -i <private key name> opc@<public IP address of instance>

5. After connecting to the compute instance, run the following commands to install/verify Python and OCI CLI packages on Linux instance.

$ sudo dnf -y install oraclelinux-developer-release-el8
$ sudo dnf install python36-oci-cli

6. After installing Python and required dependencies, download the Python script to retrieve the secret.

$ wget https://raw.githubusercontent.com/ou-developers/oci-vaultoperations/main/getsecret.py

7. Open a python file with nano editor.

$ nano getsecret.py

. In the Python script, replace the secret id ocid with your secret id.



# Replace secret_id value below with the ocid of your secret

secret_id = <secret_id>

For example:

secret_id = “ocid1.vaultsecret.oc1.iad.xxxxxxxxxxxxxxxxxxxxxxxxxxxx”

Note: If you haven't already copied the secret ID, go to Vault, and select the Secret link from the resources. Then, in List Scope, choose your assigned compartment, click on your secret key, and copy the OCID.


9. To save the script:

ctrl+o > Enter [To write/save]

ctrl+x > Yes > Enter [To exit]

10. Make the getsecret.py script executable.
$ chmod +x getsecret.py

. Run the following command to retrieve the secret.

$ python getsecret.py
The secret content created in vault has been retrieved by the application running on the instance.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Create a VCN and Functions Application
Create a VCN and Functions Application
1. Sign in to the Oracle Cloud Infrastructure (OCI) console.

2. Click the navigation menu, click Networking, and then click Virtual Cloud Networks.

3. Select the compartment that has been assigned to you in the left column under List Scope.

4. Click Start VCN Wizard.

5. Select Create VCN with Internet Connectivity, and then click Start VCN Wizard.

6. Enter VCN-1 as the VCN name. Leave the default values for the remaining fields. Click Next, and click Create to provision the VCN.

7. In the main menu, click Developer Services. Under Functions, click Applications.

8. Click Create application, and specify:

a. Name: DP-APP

b. VCN: VCN-1

c. Subnets: private subnet-VCN-1 (Regional)

9. Click Create.

Create a Private Repository in OCIR and Set Up Cloud Shell for Access
Prior to uploading and deploying a container image containing the function code, you need to specify a private repository in the Container Registry that is within the same OCI region of the Function Application.



Create a Private Repository in OCIR and Set Up Cloud Shell for Access:


1. In the Console, open the navigation menu and click Developer Services. Under Containers & Artifacts, click Container Registry.



2. Click Create repository.



3. For Repository name, enter <userID>/hello-python where <userID> is the OCI username assigned to you. For example: user22/hello-python



4. Ensure Access is set to Private. Click Create repository.



5. Go to the navigation menu and click Developer Services. Go to Functions and click Applications.



6. Click DP-APP, and then click Getting Started in the left navigation pane under Resources.



7. Scroll down to reveal Begin your Cloud Shell session. Click Launch Cloud Shell.



Note: The Cloud Shell environment can take up to 60 seconds to start.



8. In the Console, scroll down further to quickly familiarize yourself with the series of commands listed in the Setup fn CLI on Cloud Shell section. In the following steps, you will execute some but not all of those listed commands. Note the Copy links found to the right of listed commands. You will click these links and paste the copied commands into Cloud Shell when executing the subsequent steps.



9. Proceed to (2) Use the context for your region. Click the Copy link and paste to execute the fn use context <region name> in Cloud Shell to set your region identifier.



You’ll see a message such as: “Fn: Context <region name> currently in use” or “Now using context: <region name>”



10. Perform (3) Update the context with the function's compartment ID. Issue the fn update context oracle.compartment-id command to update the fn CLI context for your compartment.



11. Perform (4) Provide a unique repository name prefix to distinguish your function images from other people’s. Edit, then issue the fn update context registry command to update the fn CLI context for the prefix of the repository you just created.



Note: Replace [repo-name-prefix] with the <userID> prefix you used earlier when creating the repository.



For example: fn update context registry phx.ocir.io/ocuocictrng21/user22



12. Perform (5) Generate an Auth Token.



a. Click Generate an Auth Token. This will open the User Details page.



b. Click Generate Token and enter mytoken for the description. Click Generate Token, then copy the token in a notepad so you can use it later.



WARNING: The token cannot be retrieved in the Console later, so this value must be saved for later use. After you have copy-pasted your token to a saved text document, click Close. Close the Auth Token browser tab.



13. Return to the list of Setup fn CLI on Cloud Shell commands.

Perform (6) Log into the Registry using the Auth Token as your password. Log into the Container Registry using the listed docker login command.



Note: When prompted for the password, paste in the Auth Token you just copied in the previous step. You will not see the password be pasted, but you will get a login success message.

Create a New API Gateway
Now, you will expose a function previously deployed to a private subnet to be accessed via the API Gateway.



Create a New API Gateway:


1. Open the navigation menu and click Developer Services. Under API Management, click Gateways.



1. Select your assigned compartment from the Compartment drop-down.



2. Click Create Gateway.



3. Fill in the following information to define your API gateway.



a. Name: GTW-1

b. Type: Public

c. Compartment: <your-compartment-name>

d. Virtual Cloud Network: VCN-1

e. Subnet: public subnet-VCN-1



4. Click Create. Wait a few minutes for API Gateway to be created.

Create a New API Gateway Deployment
Now create an API Deployment that invokes serverless functions defined in Oracle Function.



Create a New API Gateway Deployment:
1. On the Gateways page, click the name of the API gateway you just created, for example GTW-1



1. On the Gateway Details page, select Deployments from the Resources list and then click Create Deployment.



2. Click From Scratch and fill in the Basic Information section:



· Name: oci-functions

· Path Prefix: /v1



Note that the deployment path prefix you specify must be preceded by one or multiple forward slash but must not end with it. It can include alphanumeric uppercase and lowercase characters, special characters like $ - _ . + ! * ' ( ) , % ; : @ & =, and must not include parameters and wildcards



· Compartment: <your-compartment-name>



3. Click Next to display the Authentication page and select No Authentication to give unauthenticated access to all routes in the API deployment.



4. Click Next to enter details of the routes in the API deployment and edit Route 1 to specify the first route in the API deployment that maps a path and one or more methods to a back-end service:



· Path: /hello

· Methods: GET

· Select Edit added single backend

· Type: Oracle Functions

· Application: DP-APP

· Function Name: hello-python



where,

· Path refers to the path for the API calls using the listed methods to the back-end service.

· Methods refers to one or more methods accepted by the back-end service.

· Type refers to the type of the back-end service.

· Application refers to the name of the application in Oracle Functions that contains the function.

· Function Name refers to the name of the function in Oracle Functions.



5. Click Next to review the details you entered for the new API deployment.



6. Click Create to create the new API deployment.



Note that it can take a few minutes to create the new API deployment.

Validate a Policy Statement That Allows API Gateway to Access the Function
Validate a Policy Statement That Allows API Gateway to Access the Function:
Verify if an IAM policy statement is present in your compartment that allows API Gateway to access Oracle Functions in your compartment.



1. Open the navigation menu and click Identity & Security. Under Identity, click Policies. (The navigation might vary depending on whether Identity Domains are enabled for your tenancy or not but ultimatley you need to reach Policies!)



2. Ensure you are in your assigned compartment, then click the existing policy link.



3. Verify that the following policy statement is present:



allow any-user to use functions-family in compartment [compartment-name] where ALL {request.principal.type = ‘ApiGateway’}

Add an Ingress Rule for the Public Subnet
Create a new stateful CIDR Ingress Rule that allows TCP HTTPS traffic (port 443) from all IP addresses and ports in the default Security List for the virtual network. It will also allow you access from your Cloud Shell.



Add an Ingress Rule for the Public Subnet:
1. Open the navigation menu, click Networking, and then click Virtual Cloud Networks.



2. Click the VCN that you have created earlier. For example: VCN-1



3. Under Resources, click Security Lists.



4. In the Security List page, click the Default Security List for VCN-1 link.



5. Click Add Ingress Rule. Choose whether it's a stateful or stateless rule. By default, rules are stateful unless you specify otherwise. Enter the other basic information:



· Source Type: CIDR

· Source CIDR: 0.0.0.0/0

· IP Protocol: TCP

· Destination Port: 443



6. Click Add ingress Rule. The rule will be added and you can see that in the Ingress Rules table.

Call the Function via Your API Gateway Deployment
Now that your API Gateway and deployment is created, you can now call the Function via your API Gateway deployment.

You will use curl to call the function via your API Gateway deployment.



Call the Function via Your API Gateway Deployment:


1. To determine the deployment endpoint, navigate back to Developer Services, under API Management, and click Gateways.



2. Select your API Gateway GTW-1.



3. Under the Resources section, click the Deployments link. Copy the Endpoint URL for oci-functions deployment.



4. Click the Cloud Shell icon at the right of the OCI console header to launch it.



5. In Cloud Shell, execute curl -k -X GET {endpoint-url}/hello to invoke the function. (Be sure to append /hello to the end of the URL you copied earlier).



For example:

curl -k -X GET {deployment-endpoint}/hello

To create the URL for curl, add your deployment path to your endpoint.



On successful execution, it will return: {“message”: “Hello World”}.



You have successfully exposed OCI Functions on public endpoints for easy access.